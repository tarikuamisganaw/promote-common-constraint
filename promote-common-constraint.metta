(: Bool type) 
(: And (-> Bool Bool Bool)) 
(: Or (-> Bool Bool Bool)) 
(: Not (-> Bool Bool)) 
(: A Bool) 
(: B Bool) 
(: C Bool) 
(: D Bool)
(: E Bool)
(= (get-first-operand $expr)
    (case $expr
        (((And $x $y) $x)
         ((Or $x $y) $x))))
(= (get-second-operand $expr)
    (case $expr
        (((And $x $y) $y)
         ((Or $x $y) $y))))
(= (is-and $expr) 
   (case $expr (((And $opr1 $opr2) True) ($_ False))))
(= (is-or $expr) 
   (case $expr (((Or $opr3 $opr4) True) ($_ False))))
(= (find-common-in-or $expr1 $expr2) 
   (case ($expr1 $expr2) 
     ((((And $x $y) (And $x $z)) $x) 
      (((And $x $y) (And $z $x)) $x) 
      (((And $y $x) (And $x $z)) $x)
      (((And $y $x) (And $z $x)) $x) 
      (($t $h) Nil))))
(= (is-nil $value) 
   (case $value 
     ((Nil True) 
      ($_ False))))
(= (promote-common-constraints $expr) 
   (if (is-or $expr) 
       (let* (($op1 (promote-common-constraints (get-first-operand $expr))) 
              ($op2 (promote-common-constraints (get-second-operand $expr))))
         (if (== $op1 $op2)
             $op1
         (let* (($common (find-common-in-or $op1 $op2)))
           (if (is-nil $common)
               (Or $op1 $op2)   
               (let* (($new-op1 (remove-common-element $op1 $common))
                      ($new-op2 (remove-common-element $op2 $common)))
                 (And $common (Or $new-op1 $new-op2)))))))
       (if (is-and $expr)
           (let* (($op1 (promote-common-constraints (get-first-operand $expr))) 
                  ($op2 (promote-common-constraints (get-second-operand $expr))))
             (And $op1 $op2))
           $expr)))

(= (remove-common-element $expr $common) 
   (if (is-and $expr)
       (let* (($x1 (get-first-operand $expr)) 
              ($x2 (get-second-operand $expr)))
         (if (== $x1 $common)
             $x2
             (if (== $x2 $common)
                 $x1
                 (And $x1 $x2)))) 
                 $expr))

;; Test cases

!(promote-common-constraints (Or (And A B) (And A C)))        ;; Output: (And A (Or B C))
!(promote-common-constraints (Or (And (Not A) B) (And (Not A) C)))  ;; Output: (And (Not A) (Or B C))
!(promote-common-constraints (Or (And A C) (And A C)))         ;; Output: (And A C)
!(promote-common-constraints (And (Or (And A B) (And A C)) (And D E)))  ;; Output: (And (And A (Or B C)) (And D E))
!(promote-common-constraints (Or (And A B) (Or (And C D) (And C E))))  ;; Output: (Or (And A B) (And C (Or D E)))
!(promote-common-constraints (Or (And A B) (And D C))) ;; Output: (Or (And A B) (And D C))
